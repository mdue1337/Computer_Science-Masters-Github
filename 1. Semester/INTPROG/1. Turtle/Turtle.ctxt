#BlueJ class context
comment0.target=Turtle
comment0.text=\r\n\ Turtle\ for\ drawing\ pictures\ on\ a\ World\ object.\r\n\ \r\n\ @author\ Kurt\ Jensen.\r\n\ @version\ 2020-08-12.\r\n
comment1.params=x\ y
comment1.target=Turtle(int,\ int)
comment1.text=\r\n\ Instantiates\ a\ new\ Turtle\ object\ at\ the\ specified\ coordinates.\r\n
comment10.params=x\ y
comment10.target=void\ jump(double,\ double)
comment10.text=\r\n\ Jumps\ as\ specified\ without\ drawing\ and\ without\ turning.\r\n\ Ends\ with\ a\ penDow.\r\n\ \r\n\ @param\ x\ \ \ \ \ Distance\ forward.\r\n\ @param\ y\ \ \ \ \ Distance\ sideways\ (+\ is\ right\ and\ -\ is\ left).\r\n
comment11.params=n\ size\ gap
comment11.target=void\ squares(int,\ double,\ double)
comment11.text=\r\n\ Draws\ a\ number\ of\ squares\ "behind"\ each\ other.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Number\ of\ squares.\r\n\ @param\ size\ \ \ \ Size\ of\ squares.\r\n\ @param\ gap\ \ \ \ \ Horizontal\ and\ vertical\ gap\ between\ adjacent\ squares.\r\n
comment12.params=n\ gap
comment12.target=void\ squares2(int,\ double)
comment12.text=\r\n\ Draws\ a\ number\ of\ squares\ inside\ each\ other.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ Number\ of\ squares.\r\n\ @param\ gap\ \ \ \ Gap\ between\ adjacent\ squares.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (equal\ to\ size\ of\ smallest\ square).\r\n
comment13.params=n\ size\ gap
comment13.target=void\ squaresHorizontal(int,\ double,\ double)
comment13.text=\r\n\ Draws\ a\ number\ of\ squares\ on\ a\ "horizontal"\ line.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Number\ of\ squares.\r\n\ @param\ size\ \ \ \ Size\ of\ squares.\r\n\ @param\ gap\ \ \ \ \ Distance\ between\ adjacent\ squares.\r\n
comment14.params=n\ size
comment14.target=void\ squaresCornered(int,\ double)
comment14.text=\r\n\ Draws\ a\ number\ of\ squares\ inside\ each\ other\ so\ that\r\n\ all\ upper\ left\ corners\ are\ in\ the\ same\ point.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Number\ of\ squares.\r\n\ @param\ size\ \ \ \ Size\ of\ largest\ square.\r\n
comment15.params=n\ size
comment15.target=void\ triangles(int,\ double)
comment15.text=\r\n\ Draws\ a\ number\ of\ triangles\ inside\ each\ other.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Number\ of\ triangles.\r\n\ @param\ size\ \ \ \ Size\ of\ largest\ triangle.\r\n
comment16.params=n\ gap
comment16.target=void\ squaresCentered(int,\ double)
comment16.text=\r\n\ Draws\ a\ number\ of\ squares\ inside\ each\ other.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ Number\ of\ squares.\r\n\ @param\ gap\ \ \ \ Gap\ between\ adjacent\ squares\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (equal\ to\ size\ of\ smallest\ square).\r\n
comment17.params=n\ size
comment17.target=void\ kochCurve(int,\ double)
comment17.text=\r\n\ Draws\ a\ Koch\ curve.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Degree\ of\ Koch\ curve.\r\n\ @param\ size\ \ \ \ Length\ of\ Koch\ curve.\r\n
comment18.params=n\ size
comment18.target=void\ kochFlake(int,\ double)
comment18.text=\r\n\ Draws\ a\ Koch\ flake.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Degree\ of\ Koch\ curves.\r\n\ @param\ size\ \ \ \ Length\ of\ each\ Koch\ curve.\r\n
comment19.params=n\ size
comment19.target=void\ sierpinskiCurve(int,\ double)
comment19.text=\r\n\ Draws\ a\ Sierpinski\ curve.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Degree\ of\ Sierpinski\ curve.\r\n\ @param\ size\ \ \ \ Length\ of\ Sierpinski\ curve.\r\n
comment2.params=
comment2.target=Turtle()
comment2.text=\r\n\ Instantiates\ a\ new\ Turtle\ object\ at\ coordinates\ (100,100).\r\n
comment20.params=n\ size
comment20.target=void\ squarePatternDiagonal(int,\ double)
comment20.text=\r\n\ Draws\ a\ pattern\ of\ squares\ where\ most\ are\ placed\ in\ the\ diagonal.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Depth\ of\ pattern\ (for\ n\=1\ a\ sigle\ square\ is\ drawn).\r\n\ @param\ size\ \ \ \ Size\ of\ largest\ square.\r\n
comment21.params=n\ size
comment21.target=void\ squarePatternFour(int,\ double)
comment21.text=\r\n\ Draws\ a\ pattern\ of\ squares,\ where\ each\ square\ immediately\r\n\ surrounds\ four\ other\ squares.\r\n\ For\ each\ level\ of\ depth\ the\ size\ of\ the\ squares\ is\ divided\ by\ 3.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Depth\ of\ pattern.\r\n\ @param\ size\ \ \ \ Size\ of\ largest\ square\ (for\ n\=1\ a\ sigle\ square\ is\ drawn).\r\n
comment22.params=
comment22.target=void\ testTurtle1()
comment22.text=\r\n\ This\ method\ allows\ the\ instructors\ (and\ the\ students)\ to\ see\r\n\ whether\ all\ the\ implemented\ methods\ in\ Turtle\ 1\ work\ as\ expected.\r\n
comment23.params=
comment23.target=void\ testTurtle2()
comment23.text=\r\n\ This\ method\ allows\ the\ instructors\ (and\ the\ students)\ to\ see\r\n\ whether\ all\ the\ implemented\ methods\ in\ Turtle\ 2\ work\ as\ expected.\r\n
comment24.params=
comment24.target=void\ testFirst()
comment24.text=\r\n\ This\ STATIC\ method\ allows\ the\ instructors\ (and\ the\ students)\ to\ see\r\n\ whether\ all\ the\ implemented\ methods\ in\ Turtle\ 1\ work\ as\ expected.\r\n
comment25.params=
comment25.target=void\ testSecond()
comment25.text=\r\n\ This\ STATIC\ method\ allows\ the\ instructors\ (and\ the\ students)\ to\ see\r\n\ whether\ all\ the\ implemented\ methods\ in\ Turtle\ 2\ work\ as\ expected.\r\n
comment26.params=
comment26.target=void\ testAll()
comment26.text=\r\n\ This\ STATIC\ method\ allows\ the\ instructors\ (and\ the\ students)\ to\ see\r\n\ whether\ all\ the\ implemented\ methods\ in\ Turtle\ 1\ and\ Turtle\ 2\ work\r\n\ as\ expected.\r\n
comment3.params=n\ size
comment3.target=void\ polygon(int,\ double)
comment3.text=\r\n\ Draws\ a\ regular\ polygon.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ Number\ of\ sides\ (n>\=3).\r\n\ @param\ size\ \ \ \ Length\ of\ each\ side.\r\n
comment4.params=radius
comment4.target=void\ circle(double)
comment4.text=\r\n\ Draws\ a\ circle.\r\n\ \r\n\ @param\ radius\ \ \ \ Length\ of\ radius.\r\n
comment5.params=size
comment5.target=void\ triangle(double)
comment5.text=\r\n\ Draws\ a\ regular\ triangle.\r\n\ \r\n\ @param\ size\ \ \ \ Length\ of\ each\ side.\r\n
comment6.params=size
comment6.target=void\ square(double)
comment6.text=\r\n\ Draws\ a\ square.\r\n\ \r\n\ @param\ size\ \ \ \ Length\ of\ each\ side.\r\n
comment7.params=size
comment7.target=void\ star(double)
comment7.text=\r\n\ Draws\ a\ star\ with\ five\ corners.\r\n\ Turn\ 144\ because\ (360\ \u00D7\ 2)\ /\ 5\ \=\ 144,\ where\ 5\ is\ the\ number\ of\ points\ and\ \r\n\ 2\ is\ the\ step\ size\ (you\ connect\ every\ second\ point).\r\n\ @param\ size\ \ \ Length\ of\ each\ side.\r\n
comment8.params=n\ delta
comment8.target=void\ spiral(int,\ double)
comment8.text=\r\n\ Draws\ a\ spiral.\r\n\ \r\n\ @param\ n\ \ \ \ \ \ \ \ Number\ of\ sides.\r\n\ @param\ delta\ \ \ \ Difference\ in\ length\ between\ two\ succeeding\ sides\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (equal\ to\ shortest\ side).\r\n
comment9.params=x\ y
comment9.target=void\ jumpTo(double,\ double)
comment9.text=\r\n\ Jumps\ to\ specified\ coordinates\ without\ drawing\ and\ without\ turning.\r\n\ Ends\ with\ a\ penDown.\r\n\ \r\n\ @param\ x\ \ \ \ x\ coordinate.\r\n\ @param\ y\ \ \ \ y\ coordinate.\r\n
numComments=27
